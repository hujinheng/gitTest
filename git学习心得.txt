Mac OS X:
【安装】
一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：http://brew.sh/。

第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，
你需要运行Xcode，选择菜单“Xcode”->“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，
点“Install”就可以完成安装了。
Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
windows:
【安装】
Windows下要使用很多Linux/Unix的工具时，需要Cygwin这样的模拟环境，Git也一样。Cygwin的安装和配置都比较复杂，就不建议你折腾了。
不过，有高人已经把模拟环境和Git都打包好了，名叫msysgit，只需要下载一个单独的exe安装程序，其他什么也不用装，绝对好用。

msysgit是Windows版的Git，从 http://msysgit.github.io/ 下载，然后按默认选项安装即可。

安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
linux:
<命令操作>:

git config --global user.email "你的邮箱"
git config --global user.name "你的名字" 

git          		 --------检查是否有git
git init                 --------创建仓库
git add       		 --------加入到暂存区
git commit  -m 注释描述  --------提交到分支  参数 
git commit  -am 注释描述 --------git add和git commit的合并
git status    		 --------命令可以让我们时刻掌握仓库当前的状态
git diff                 --------查看修改内容 
git log                  --------命令显示从最近到最远的提交日志 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline
git reset --hard HEAD^   ----------- 退回当前版本的上一个版本(多少个^ 就退多少次)
git reset --hard id      -----------(id就是commit id)
git reset --hard file    ----------（file 文件名 带后缀）可以把暂存区的修改撤销掉，重新放回工作区
git reflog               ----------Git提供了一个命令git reflog用来记录你的每一次命令  用于方便你查找你想退回的commit id
git checkout -- file     ----------可以丢弃工作区的修改（回到最近一次add进仓库的文件修改状态）(也被认为是从版本库中down下来)
git rm                   ----------确实要从版本库中删除该文件

<远程仓库命令>:
ssh-keygen -t rsa -C "你的email地址" ---------新建一个key （一般不用设置密码 除非是军事目的）
git remote add origin git@github.com:你的github账号/你的包含git的文件夹名.git
git push origin master  ---------------------把本地最新分支修改推送至GitHub
(注意:由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 例子：git push -u origin master  这里的master是你的分支名)

git clone git@github.com:你的github账号/仓库名.git -----------从远程地址克隆一个仓库下来本地

<分支管理命令>:
git branch             -----------查看当前分支
git branch name        -----------创建分支
git checkout name      -----------切换分支
git checkout -b name   -----------创建+切换分支
git merge name         -----------合并某分支到当前分支（指把现在的分支合并到name分支指向的位置）
git branch -d name     -----------删除分支
git merge --no-ff -m "merge with no-ff" 分支  ---------这样合并相当于把当前合并后做一次commit 这样就不会跟分支指向同一个地方
（fast forward合并就看不出来曾经做过合并）
git stash              -----------把现在的工作分支临时储存在一个地方
git stash list         -----------查看被用git stash临时储存的列表
git stash apply stash@{索引} -----------恢复stash现场到工作区(不推荐)
git stash drop         -----------删除stash现场(不推荐)
git stash pop          -----------恢复的同时把stash内容也删了(推荐)
git branch -D name     -----------强行删除（注意是大D） 在没有合并的情况下直接删除分支会导致分支删除失败 这时候就要用到

<多人协作命令>:
git remote -v                                       -----------查看远程库信息
git push  仓库文件夹(一般是起origin)  本地分支名     -----------抓取远程仓库信息到本地
git checkout -b 本地分支名 仓库文件夹/仓库分支名    ----------在本地创建和远程分支对应的分支
git branch --set-upstream 本地分支 origin/仓库分支名 ---------- 建立本地分支和远程分支的关联

<标签管理>:
git tag						---------查找所有标签
git tag 标签名				        ---------新建标签 默认为HEAD
git tag 标签名 commit_id			---------针对commit_id设立标签
git log --pretty=oneline --abbrev-commit        ---------查找历史提交的commit id
git show 标签                                   ----------可以看到说明文字
git tag -s 标签名 -m "描述" 私钥                --------通过-s用私钥签名一个标签
git tag -d 标签名 				--------删除标签
git push origin :refs/tags/标签名               ---------可以删除一个远程标签
git push 仓库文件夹(origin) 标签名		--------一次性推送全部尚未推送到远程的本地标签
-------------------------------------------------
【安装】
git  检查是否有git

老一点的Debian或Ubuntu Linux，要把命令改为sudo apt-get install git-core，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫git-core了。由于Git名气实在太大，后来就把GNU Interactive Tools改成gnuit，git-core正式改为git。

如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。


【创建一个版本仓库】:
makdir xxx
cd xxx
pwd
pwd命令用于显示当前目录。在我的Mac上，这个仓库位于/Users/michael/learngit。
如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。

第二步，通过git init命令把这个目录变成Git可以管理的仓库

瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。

如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。

一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。

【添加文件到仓库】
第一步，用命令git add告诉Git，把文件添加到仓库：
git add xxxx.xxx
执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

第二步，用命令git commit告诉Git，把文件提交到仓库：
git commit -m "wrote a readme file"
简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录

现在总结一下今天学的两点内容：

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。

【查看git工作区状态】
git status    命令可以让我们时刻掌握仓库当前的状态
git diff      顾名思义就是查看difference，显示的格式正是Unix通用的diff格式

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

【版本退回】
这里任何版本都有唯一对应的版本号  commit id  只要找到这个版本号就可以去到指定的版本
git log       命令显示从最近到最远的提交日志

首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0
（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，
当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

git reset --hard HEAD^    退回当前版本的上一个版本(多少个^ 就退多少次)

git reset --hard 3628164     (3628164就是上述说道的commit id)

git reflog  Git提供了一个命令git reflog用来记录你的每一次命令  用于方便你查找你想退回的commit id

小结

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

【工作区和暂存区】
Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。

先来看名词解释。

工作区（Working Directory）

就是你在电脑里能看到的目录


版本库（Repository）

工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。

Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

git add   命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。

暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。
没弄明白暂存区是怎么回事的童鞋，请向上滚动页面，再看一次


【管理修改】
下面，我们要讨论的就是，为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。

修改过的文件都先git add就可以直接现在暂存区合并后一次性提交

那怎么提交第二次修改呢？你可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了：

现在，你又理解了Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。


【撤销修改】

git checkout -- file可以丢弃工作区的修改 例子:git checkout -- readme.txt

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令


git reset HEAD file  Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
git reset            命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本

小结

又到了小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

【删除文件】
一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了
这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了

现在你有两个选择，

一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
git rm test.txt
git commit -m "remove test.txt"
现在，文件就从版本库中被删除了。

另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本
git checkout -- test.txt
【远程仓库】
ssh-keygen -t rsa -C "你的email地址" 
这里生成两个文件id_rsa(私钥)  id_rsa.pub(公钥)
注册一个github账号
把生成的id_rsa.pub加入到github的SSH Keys里面

【添加远程仓】
小结

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

【从远程库克隆】
我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件

你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。

使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https

小结

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

【分支管理】
分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。

如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！

分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。

其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。

但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件

【创建与合并分支】
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。

首先，我们创建dev分支，然后切换到dev分支
git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
git branch dev
git checkout dev

然后，用git branch命令查看当前分支
git branch
* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号。

现在，我们把dev分支的工作成果合并到master分支上：
git merge dev
 Updating d17efd8..fec145a
 Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
git merge命令用于合并指定分支到当前分支
注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
当然，也不是每次合并都能Fast-forward，我们后面会将其他方式的合并。

合并完成后，就可以放心地删除dev分支了：
git branch -d dev

小结

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

【解决冲突】
git merge以后
对冲突文件打开手动修改好再 add commit

【分支管理策略】
git merge --no-ff -m "merge with no-ff" 分支
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去

小结

Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

【Bug分支】
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

git stash list查看储藏起来的工作场

工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了


你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令
git stash apply stash@{0}

小结

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

【Feature分支】
与bug分支相似
注意的是可能遇到没合并就要删除分支 即可能丢失这个分支的修改情况
小结

开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

【多人协作】
要查看远程库的信息，用git remote
或者，用git remote -v显示更详细的信息

当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。
现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支
git checkout -b dev origin/dev

现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程
git commit -m "add /usr/bin/env"
git push origin dev

你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送
推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送

git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
git branch
再pull

这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push

因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

【创建标签】
敲命令git tag <name>就可以打一个新标签
可以用命令git tag查看所有标签

默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？

方法是找到历史提交的commit id，然后打上就可以了

用命令git tag查看标签
注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字


还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字
git tag -a v0.1 -m "version 0.1 released" 3628164


用命令git show 标签 可以看到说明文字
例如:git show v0.1

还可以通过-s用私钥签名一个标签
git tag -s v0.2 -m "signed version 0.2 released" fec145a
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错
如果报错，请参考GnuPG帮助文档配置Key

小结

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。

【操作标签】
一次性推送全部尚未推送到远程的本地标签
git push origin --tags

从远程删除。删除命令也是push
git push origin :refs/tags/v0.9

小结

命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

【使用GitHub】
小结

在GitHub上，可以任意Fork开源仓库；

自己拥有Fork后的仓库的读写权限；

可以推送pull request给官方仓库来贡献代码。